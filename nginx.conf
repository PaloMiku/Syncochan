# Syncochan - Nginx 配置示例
# 适用于 Nginx 1.10+ 与 PHP-FPM

# 请根据实际情况调整以下配置，并将其放置在 Nginx 配置目录中
# 通常为：/etc/nginx/sites-available/ 或 /etc/nginx/conf.d/

server {
    listen 80;
    listen [::]:80;
    
    # 配置域名
    server_name your-domain.com www.your-domain.com;
    
    # 网站根目录（调整为实际路径）
    root /var/www/syncochan;
    
    # 默认首页
    index index.php index.html;
    
    # 字符集
    charset utf-8;
    
    # 日志文件（可选）
    access_log /var/log/nginx/syncochan_access.log;
    error_log /var/log/nginx/syncochan_error.log;
    
    # 安全：阻止访问敏感目录和文件
    location ~ ^/(backend/data|backups|\.git) {
        deny all;
        return 404;
    }
    
    location ~ /\.(env|htaccess|gitignore)$ {
        deny all;
        return 404;
    }
    
    location ~ composer\.(json|lock)$ {
        deny all;
        return 404;
    }
    
    # 后端管理系统
    location /backend/ {
        # 优先尝试访问真实文件
        try_files $uri $uri/ /backend/index.php?$query_string;
        
        # 处理后端目录中的 PHP 文件
        location ~ \.php$ {
            # 确保文件存在，防止任意代码执行
            try_files $uri =404;
            
            # PHP-FPM 配置（根据实际情况调整）
            fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;  # 或 127.0.0.1:9000
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
            
            # 超时设置（适应长时间运行的更新任务）
            fastcgi_read_timeout 300;
            fastcgi_send_timeout 300;
        }
    }
    
    # 前台路由：处理静态站点和 SPA 应用
    location / {
        # 优先尝试访问静态文件、目录，否则交给 index.php
        try_files $uri $uri/ /index.php?$query_string;
    }
    
    # 处理根目录 PHP 文件（主要是 index.php）
    location ~ ^/[^/]+\.php$ {
        try_files $uri =404;
        
        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;  # 根据实际情况调整
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
        
        fastcgi_read_timeout 300;
        fastcgi_send_timeout 300;
    }
    
    # 静态资源缓存策略
    location ~* \.(jpg|jpeg|png|gif|webp|svg|ico|css|js|woff|woff2|ttf|eot|otf)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }
    
    # HTML 缓存（较短时间）
    location ~* \.html$ {
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
    }
    
    # JSON 和 XML 文件
    location ~* \.(json|xml)$ {
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
    }
    
    # 安全头部
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Gzip 压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/rss+xml
        application/atom+xml
        image/svg+xml;
    
    # 禁止访问备份文件
    location ~ \.(bak|backup|old|save|swp|~)$ {
        deny all;
        return 404;
    }
}

# HTTPS 配置（推荐）
# 使用 Let's Encrypt 或其他 SSL 证书
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    
    server_name your-domain.com www.your-domain.com;
    
    # SSL 证书配置（使用 Certbot 自动生成）
    # ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;
    
    # SSL 优化配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # HSTS（可选，生产环境推荐）
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # 其他配置与 HTTP 相同
    root /var/www/syncochan;
    index index.php index.html;
    
    # ... 复制上面 HTTP 配置的 location 块 ...
}

# HTTP 自动跳转到 HTTPS（可选）
# server {
#     listen 80;
#     listen [::]:80;
#     server_name your-domain.com www.your-domain.com;
#     return 301 https://$server_name$request_uri;
# }
